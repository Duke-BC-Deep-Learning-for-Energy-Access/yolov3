import os
import matplotlib.pyplot as plt
import numpy
import argparse


def main(args):
    experiments_folder = args.experiments_folder
    results_dir = args.results_dir
    runs = args.runs

    assert os.path.isdir(experiments_folder), f'Experiments folder {experiments_folder} is not a valid directory'

    # TODO abstract the looping through results folders into a function that experiments.py, count_finished_runs.py and
    #  this file can all use
    experiments = os.listdir(experiments_folder)
    for experiment in experiments:
        experiment_results_folder = os.path.join(results_dir, experiment)
        if not os.path.exists(experiment_results_folder):
            os.mkdir(experiment_results_folder)

        conditions = os.listdir(os.path.join(experiments_folder, experiment))
        for condition in conditions:
            condition_results_folder = os.path.join(experiment_results_folder, condition)
            if not os.path.exists(condition_results_folder):
                os.mkdir(condition_results_folder)
            fig, ax = plt.subplots(1, 1, figsize=(5, 5))
            avg_ap = 0
            for run in range(runs):
                run_results_folder = os.path.join(condition_results_folder, f'run-{run}')
                precision_file = os.path.join(run_results_folder, 'precision.txt')
                recall_file = os.path.join(run_results_folder, 'recall.txt')
                assert os.path.exists(precision_file) and os.path.exists(recall_file), f'recall.txt and/or ' \
                                                                                       f'precision.txt do not exist ' \
                                                                                       f'for {run_results_folder}'
                with open(precision_file, 'r') as f:
                    lines = f.read().split('\n')[:-1]
                    precision = [float(line.strip('[]')) for line in lines]

                with open(recall_file, 'r') as f:
                    lines = f.read().split('\n')[:-1]
                    recall = [float(line.strip('[]')) for line in lines]

                ax.plot(recall, precision, label=os.path.basename(run_results_folder))

                test_results_file = os.path.join(run_results_folder, 'test_results.txt')
                assert os.path.exists(test_results_file), f'{test_results_file} does not exist'
                with open(test_results_file, 'r') as f:
                    f.readline()
                    metrics_line = f.readline()
                    ap = float(list(filter(None, metrics_line.split(' ')))[5])
                avg_ap += ap
            avg_ap /= runs
            print(f'{condition_results_folder} average AP@0.5: {avg_ap:.3}')
  
            ax.set_xlabel('Recall')
            ax.set_ylabel('Precision')
            ax.set_xlim(0, 1.01)
            ax.set_ylim(0, 1.01)
            ax.legend(loc='best')
            ax.set_title(f'{experiment}_{condition}')
            fig.tight_layout()
            output_path = os.path.join(condition_results_folder, f'PR_curve_{experiment}_{condition}.png')
            fig.savefig(output_path, dpi=300)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--experiments-folder', type=str, default='experiment_setup',
                        help='Experiments folder generated by setup. Will run each')
    parser.add_argument('--runs', type=int, default=4, help='Number of runs to complete for each condition')
    parser.add_argument('--results-dir', type=str, default='experiment_results',
                        help='Path to directory to save training and testing results')
    args = parser.parse_args()
    main(args)
